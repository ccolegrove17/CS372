/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eventmanager;

import java.io.*;
import javax.swing.*;
import java.util.*;
import java.util.regex.*;

/**
 *
 * @author ccolegrove17
 */
public class Interface extends javax.swing.JFrame {

    private int months[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};//number of days in the month
    String f = new String("events.txt");//where the events will be saved
    ArrayList<Event> events = new ArrayList<>();//an arraylist of all the events

    /**
     * A function to update how many days are in a month
     */
    private void dateUpdate() {
        String s = (String) monthField.getSelectedItem();//reads what month it is
        int m = Integer.parseInt(s);//turns it into an integer
        MutableComboBoxModel model = (MutableComboBoxModel) dayField.getModel();//makes the model
        int days = months[m - 1];//sets the number of days in the month
        int y = Integer.parseInt(yearField.getText());//reads the year
        if (m == 2 && y % 4 == 0) {//if the month is february and it is a leap year
            days++;//adds an extra day to february
        }
        for (int i = model.getSize() - 1; i >= 0; i--) {//for all the items in the drop-down list
            model.removeElementAt(i);//removes all the items
        }
        for (int i = 1; i <= days; i++) {//for all the days of the month
            if (i <= 9) {//if the date is below 10
                model.addElement("0" + i);//adds a 0 to the start of the day
            } else {
                model.addElement(i);//otherwise just adds the day number
            }
        }
        dayField.setModel(model);//sets the drop-down items
    }

    /**
     * Creates new form Interface
     */
    public Interface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        nameField = new javax.swing.JTextField();
        locationField = new javax.swing.JTextField();
        yearField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        submitButton = new javax.swing.JButton();
        dateButton = new javax.swing.JButton();
        nameButton = new javax.swing.JButton();
        locationButton = new javax.swing.JButton();
        monthField = new javax.swing.JComboBox();
        dayField = new javax.swing.JComboBox();
        infoLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        textArea.setEditable(false);
        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        yearField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                yearFieldFocusLost(evt);
            }
        });
        yearField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                yearFieldKeyTyped(evt);
            }
        });

        jLabel1.setText("Name");

        jLabel2.setText("Location");

        jLabel3.setText("Month");

        jLabel4.setText("Day");

        jLabel5.setText("Year");

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        dateButton.setText("Sort by Date");
        dateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateButtonActionPerformed(evt);
            }
        });

        nameButton.setText("Sort by Name");
        nameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameButtonActionPerformed(evt);
            }
        });

        locationButton.setText("Sort by Location");
        locationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationButtonActionPerformed(evt);
            }
        });

        monthField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        monthField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthFieldActionPerformed(evt);
            }
        });

        dayField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        infoLabel.setText("Information: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(dateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(locationButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(infoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(locationField, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(yearField, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel4))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(monthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(dayField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(submitButton, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap(115, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 6, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5))
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel4))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dayField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(monthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(yearField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(locationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitButton)
                    .addComponent(infoLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameButton)
                    .addComponent(dateButton)
                    .addComponent(locationButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * when the user hits the Submit button
     *
     * @param evt
     */
    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        String year = yearField.getText();//reads in what year it is
        int length = year.length();//length is how many characters were read in

        if (length < 4) {//if length is less than 4
            for (int i = 0; i < 4 - length; i++) {
                year = "0" + year;//add zeroes to the beginning of the string until it is 4 long
            }
        }
        if (length > 4) {//if length is greater than 4
            infoLabel.setText("Information: That is too far into the future. Stupid time-traveler.");//tells the user that they can't do that
            return;//ends the function
        }

        String date = year + monthField.getSelectedItem() + dayField.getSelectedItem();//makes the date based on what they input
        Event event = new Event(nameField.getText(), locationField.getText(), date);//makes an event with that name, location, and date
        events.add(event);//adds the event to the arraylist
        try {//in case everything breaks
            BufferedWriter wrtr = new BufferedWriter(new FileWriter(f, true));//makes a new writer
            String line = event.toString();//calls the function of what to write
            wrtr.write(line);//writes the line to the file
            wrtr.newLine();//puts a new line
            wrtr.close();//closes the file
            textArea.append(line + "\n");//adds it to the text area
            infoLabel.setText("Information: Added new event!");//tells the user they added an event
        } catch (Exception ex) {
            System.out.printf("You fail. %s", ex.getMessage());//hopefully this won't happen
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    /**
     * For when the program is first opened.
     *
     * @param evt
     */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            BufferedReader rdr = new BufferedReader(new FileReader(f));//reads in the text file
            String line;//what's read in
            String[] patterns = {"Name:(.*) Location:", "Location:(.*) Month:", "Month:(.*) Day:", "Day:(.*) Year:", "Year:(.*)"};//what the regex will search for
            String[] info = {"", "", "", "", ""};//an array of the information about the event
            while ((line = rdr.readLine()) != null) {//as long as there are still lines to read in
                for (int i = 0; i < 5; i++) {//will run 5 times for the different types of information
                    Pattern p = Pattern.compile(patterns[i]);//makes a pattern
                    Matcher m = p.matcher(line);//matches the pattern to the line
                    while (m.find()) {//searches for the pattern
                        info[i] = m.group(1);//sets what was found to the array
                    }
                }
                Event event = new Event(info[0], info[1], info[4] + info[2] + info[3]);//makes an event based on what was found in the file
                events.add(event);//adds the event to the arraylist
            }
            rdr.close();//closes the file
            events.sort(Event.dateComparator);//sorts the arraylist by date
            textArea.setText(null);//clears the text area
            for (int i = 0; i < events.size(); i++) {//as long as there are more objects in the arraylist
                String list = events.get(i).toString();//sets the event's information
                textArea.append(list + "\n");//writes the information to the text area
            }
        } catch (Exception ex) {//if the reading fails
            try {//in case things break
                BufferedWriter wrtr = new BufferedWriter(new FileWriter(f, true));//makes an empty file
                wrtr.close();//closes the empty file
            } catch (Exception e) {//hopefully we won't get here
                System.out.println(e.getMessage());//outputs the error message
            }
        }    }//GEN-LAST:event_formWindowOpened
    /**
     * for when they try to sort by date
     *
     * @param evt
     */
    private void dateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateButtonActionPerformed
        events.sort(Event.dateComparator);//sorts the arraylist by date
        textArea.setText(null);//clears the text area
        for (int i = 0; i < events.size(); i++) {//for all the events in the arraylist
            String list = events.get(i).toString();//sets the string to the event's information
            textArea.append(list + "\n");//adds the information to the text area
        }
        infoLabel.setText("Information: Sorted!");//tells the user it was sorted
    }//GEN-LAST:event_dateButtonActionPerformed
    /**
     * for when they try to sort by event name
     *
     * @param evt
     */
    private void nameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameButtonActionPerformed
        events.sort(Event.nameComparator);//sorts the arraylist by name
        textArea.setText(null);//clears the text area
        for (int i = 0; i < events.size(); i++) {//for all the events in the arraylist
            String list = events.get(i).toString();//sets the string to the event's information
            textArea.append(list + "\n");//adds the information to the text area
        }
        infoLabel.setText("Information: Sorted!");//tells the user it was sorted
    }//GEN-LAST:event_nameButtonActionPerformed
    /**
     * for when the user sorts by location
     *
     * @param evt
     */
    private void locationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationButtonActionPerformed
        events.sort(Event.locationComparator);//sorts the arraylist by location
        textArea.setText(null);//clears the text area
        for (int i = 0; i < events.size(); i++) {//for all the events in the arraylist
            String list = events.get(i).toString();//sets the string to the event's information
            textArea.append(list + "\n");//adds the information to the text area
        }
        infoLabel.setText("Information: Sorted!");//tells the user it was sorted
    }//GEN-LAST:event_locationButtonActionPerformed
    /**
     * whenever the user changes the month
     *
     * @param evt
     */
    private void monthFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthFieldActionPerformed
        dateUpdate();//updates how many days are available
    }//GEN-LAST:event_monthFieldActionPerformed
    /**
     * for when the user finished entering the year
     *
     * @param evt
     */
    private void yearFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_yearFieldFocusLost
        dateUpdate();//updates how many days are available in case it's a leap year
    }//GEN-LAST:event_yearFieldFocusLost

    private void yearFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_yearFieldKeyTyped
        char character = evt.getKeyChar();//gets the character entered into the textfield
        if (character < '0' || character > '9') {//if the character is not a number
            evt.consume();//doesn't allow the character to be added to the text field
        }
    }//GEN-LAST:event_yearFieldKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton dateButton;
    private javax.swing.JComboBox dayField;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton locationButton;
    private javax.swing.JTextField locationField;
    private javax.swing.JComboBox monthField;
    private javax.swing.JButton nameButton;
    private javax.swing.JTextField nameField;
    private javax.swing.JButton submitButton;
    private javax.swing.JTextArea textArea;
    private javax.swing.JTextField yearField;
    // End of variables declaration//GEN-END:variables
}
