/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package finalproject;

import java.io.BufferedWriter;
import java.io.FileWriter;
import javax.swing.JOptionPane;
import javax.swing.MutableComboBoxModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Craig
 */
public class Interface extends javax.swing.JFrame {

    MutableComboBoxModel model;
    User user = new User("");
    Class classes = new Class();

    /**
     * sets the combo box with the user's class schedule
     */
    private void addCurrentClasses() {
        model = (MutableComboBoxModel) removeClassComboBox.getModel();
        clearModel();
        for (int i = 0; i < user.userClasses.size(); i++) {
            model.addElement(user.userClasses.get(i));
        }
        removeClassComboBox.setModel(model);
    }

    /**
     * clears the combo box
     */
    private void clearModel() {
        for (int i = model.getSize() - 1; i >= 0; i--) {
            model.removeElementAt(i);
        }
    }

    /**
     * updates the textArea with the user's updated schedule calls
     * addCurrentClasses to update the combo box
     */
    private void updateSchedule() {
        textArea2.setText(null);
        boolean firstTime = true;
        for (int i = 0; i < user.userClasses.size(); i++) {
            if (firstTime == true) {
                textArea2.append(user.userClasses.get(i).outputInfo(i));
                firstTime = false;
            } else {
                textArea2.append("\n\n" + user.userClasses.get(i).outputInfo(i));
            }
        }
        creditsLabel.setText("Credits: " + user.totalCredits());
        numberOfClassesLabel.setText("Number of Classes: " + user.numberOfClasses());
        textArea2.setCaretPosition(0);
        addCurrentClasses();
    }

    /**
     * Creates new form Interface
     */
    public Interface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jScrollPane4 = new javax.swing.JScrollPane();
        classTable = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        classField = new javax.swing.JTextField();
        viewClassButton = new javax.swing.JButton();
        idSort = new javax.swing.JButton();
        nameSort = new javax.swing.JButton();
        creditsSort = new javax.swing.JButton();
        facultySort = new javax.swing.JButton();
        timeSort = new javax.swing.JButton();
        findClassField = new javax.swing.JTextField();
        findClassButton = new javax.swing.JButton();
        conflictField2 = new javax.swing.JTextField();
        conflictField1 = new javax.swing.JTextField();
        conflictButton = new javax.swing.JButton();
        addClassButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textArea2 = new javax.swing.JTextArea();
        nameLabel = new javax.swing.JLabel();
        numberOfClassesLabel = new javax.swing.JLabel();
        creditsLabel = new javax.swing.JLabel();
        clearButton = new javax.swing.JButton();
        tableButton = new javax.swing.JButton();
        addClassComboBox = new javax.swing.JComboBox();
        removeClassComboBox = new javax.swing.JComboBox();
        removeClassButton = new javax.swing.JButton();
        infoLabel = new javax.swing.JLabel();

        classTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},        {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},        {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},        {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},        {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},        {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},        {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},        {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},        {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},        {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},        {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},        {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},        {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},        {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},        {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday"
            }
        ));
        classTable.setFocusable(false);
        classTable.setRequestFocusEnabled(false);
        classTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(classTable);

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Class Scheduler");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        textArea.setEditable(false);
        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        classField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                classFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                classFieldKeyTyped(evt);
            }
        });

        viewClassButton.setText("View Class");
        viewClassButton.setToolTipText("View information about a class.");
        viewClassButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewClassButtonActionPerformed(evt);
            }
        });

        idSort.setText("ID");
        idSort.setToolTipText("Sorts the classes by ID.");
        idSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idSortActionPerformed(evt);
            }
        });

        nameSort.setText("Name");
        nameSort.setToolTipText("Sorts the classes by Name.");
        nameSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameSortActionPerformed(evt);
            }
        });

        creditsSort.setText("Credits");
        creditsSort.setToolTipText("Sorts the classes by Credits.");
        creditsSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creditsSortActionPerformed(evt);
            }
        });

        facultySort.setText("Faculty");
        facultySort.setToolTipText("Sorts the classes by Faculty.");
        facultySort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facultySortActionPerformed(evt);
            }
        });

        timeSort.setText("Start");
        timeSort.setToolTipText("Sorts the classes by Start Time.");
        timeSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeSortActionPerformed(evt);
            }
        });

        findClassField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                findClassFieldKeyPressed(evt);
            }
        });

        findClassButton.setText("Find Class");
        findClassButton.setToolTipText("Search for a class by ID, Name, or Faculty.");
        findClassButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findClassButtonActionPerformed(evt);
            }
        });

        conflictField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                conflictField2KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                conflictField2KeyTyped(evt);
            }
        });

        conflictField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                conflictField1KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                conflictField1KeyTyped(evt);
            }
        });

        conflictButton.setText("Check Conflict");
        conflictButton.setToolTipText("Checks if 2 classes have conflicting schedules.");
        conflictButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conflictButtonActionPerformed(evt);
            }
        });

        addClassButton.setText("Add Class");
        addClassButton.setToolTipText("Adds a class to the user's schedule.");
        addClassButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addClassButtonActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Class Information:");

        textArea2.setEditable(false);
        textArea2.setColumns(20);
        textArea2.setRows(5);
        jScrollPane2.setViewportView(textArea2);

        nameLabel.setText("Name: ");

        numberOfClassesLabel.setText("Number of Classes: ");

        creditsLabel.setText("Credits:");

        clearButton.setText("Clear Schedule");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        tableButton.setText("View Schedule");
        tableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableButtonActionPerformed(evt);
            }
        });

        removeClassButton.setText("Remove Class");
        removeClassButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeClassButtonActionPerformed(evt);
            }
        });

        infoLabel.setText("Information: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(idSort)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nameSort)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(creditsSort)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(facultySort)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timeSort))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(conflictField1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(conflictField2))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(classField, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(findClassField, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(viewClassButton)
                                    .addComponent(findClassButton)
                                    .addComponent(conflictButton)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(jLabel1))))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(creditsLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addClassComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addClassButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tableButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(removeClassComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(removeClassButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(clearButton))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nameLabel)
                                    .addComponent(numberOfClassesLabel)))
                            .addComponent(infoLabel))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(classField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(viewClassButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(findClassButton)
                                    .addComponent(findClassField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(conflictField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(conflictField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(conflictButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(idSort)
                                    .addComponent(nameSort)
                                    .addComponent(creditsSort)
                                    .addComponent(facultySort)
                                    .addComponent(timeSort)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numberOfClassesLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(creditsLabel)
                                .addGap(5, 5, 5)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tableButton)
                                    .addComponent(addClassComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addClassButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(infoLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(clearButton)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(removeClassComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(removeClassButton)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * when the program is first run
     *
     * @param evt
     */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        String name = JOptionPane.showInputDialog("Please enter your full name:");
        user.setName(name);
        nameLabel.setText("Name: " + name);
        user.userIO(user);
        updateSchedule();
        classes.fillClass();
        addCurrentClasses();
    }//GEN-LAST:event_formWindowOpened

    /**
     * when the user wants to see information about a class number
     *
     * @param evt
     */
    private void viewClassButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewClassButtonActionPerformed
        textArea.setText(null);
        model = (MutableComboBoxModel) addClassComboBox.getModel();
        try {
            int number = Integer.parseInt(classField.getText()) - 1;
            textArea.append(classes.directory.get(number).outputInfo(number));
            clearModel();
            model.addElement(classes.directory.get(number));
        } catch (Exception ex) {
        }
        classField.setText(null);
        textArea.setCaretPosition(0);
        infoLabel.setText("Information: ");
    }//GEN-LAST:event_viewClassButtonActionPerformed

    /**
     * when the user presses enter, clicks the button
     *
     * @param evt
     */
    private void classFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_classFieldKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) { //checks if the user presses enter in the text field
            viewClassButton.doClick();//clicks the button
        }    }//GEN-LAST:event_classFieldKeyPressed

    /**
     * sorts the arraylist by ID
     *
     * @param evt
     */
    private void idSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idSortActionPerformed
        classes.directory.sort(classes.IDComparator);
        classField.requestFocus();
    }//GEN-LAST:event_idSortActionPerformed
    /**
     * sorts the arraylist by name
     *
     * @param evt
     */
    private void nameSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameSortActionPerformed
        classes.directory.sort(classes.nameComparator);
        classField.requestFocus();
    }//GEN-LAST:event_nameSortActionPerformed
    /**
     * sorts the arraylist by credits
     *
     * @param evt
     */
    private void creditsSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creditsSortActionPerformed
        classes.directory.sort(classes.creditsComparator);
        classField.requestFocus();
    }//GEN-LAST:event_creditsSortActionPerformed
    /**
     * sorts the arraylist by faculty
     *
     * @param evt
     */
    private void facultySortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facultySortActionPerformed
        classes.directory.sort(classes.facultyComparator);
        classField.requestFocus();
    }//GEN-LAST:event_facultySortActionPerformed
    /**
     * sorts the arraylist by start time
     *
     * @param evt
     */
    private void timeSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeSortActionPerformed
        classes.directory.sort(classes.startComparator);
        classField.requestFocus();
    }//GEN-LAST:event_timeSortActionPerformed

    /**
     * looks for a class name, ID, or faculty in the class arraylist
     *
     * @param evt
     */
    private void findClassButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findClassButtonActionPerformed
        textArea.setText(null);
        model = (MutableComboBoxModel) addClassComboBox.getModel();
        clearModel();
        boolean firstTime = true;
        String name = findClassField.getText();
        for (int i = 0; i < classes.directory.size(); i++) {
            if (classes.directory.get(i).getName().toLowerCase().matches(".*" + name.toLowerCase() + ".*") || classes.directory.get(i).getFaculty().toLowerCase().matches(".*" + name.toLowerCase() + ".*") || classes.directory.get(i).getID().toLowerCase().matches(".*" + name.toLowerCase() + ".*")) {
                if (firstTime == true) {
                    textArea.append(classes.directory.get(i).outputInfo(i));
                    firstTime = false;
                } else {
                    textArea.append("\n\n" + classes.directory.get(i).outputInfo(i));
                }
                model.addElement(classes.directory.get(i));
            }
        }
        infoLabel.setText("Information: ");
        textArea.setCaretPosition(0);
    }//GEN-LAST:event_findClassButtonActionPerformed

    /**
     * checks if there is a conflict in two class times
     *
     * @param evt
     */
    private void conflictButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conflictButtonActionPerformed
        try {
            if (classes.dayConflict(classes.directory.get(Integer.parseInt(conflictField1.getText()) - 1), classes.directory.get(Integer.parseInt(conflictField2.getText()) - 1))) {
                textArea.setText("There is a conflict in class times!");
            } else {
                textArea.setText("There is no conflict in class times.");
            }
        } catch (Exception ex) {
        }
        infoLabel.setText("Information: ");
    }//GEN-LAST:event_conflictButtonActionPerformed

    /**
     * adds a class if there is no conflict in times
     *
     * @param evt
     */
    private void addClassButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addClassButtonActionPerformed
        Class userClass = (Class) addClassComboBox.getSelectedItem();
        if (!user.addClass(userClass)) {
            infoLabel.setText("Information: There is a conflict in class times!");
        } else {
            infoLabel.setText("Information: Added class to schedule!");
        }
        updateSchedule();
    }//GEN-LAST:event_addClassButtonActionPerformed

    /**
     * when the user presses enter, clicks the button
     *
     * @param evt
     */
    private void findClassFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findClassFieldKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) { //checks if the user presses enter in the text field
            findClassButton.doClick();//clicks the button
        }
    }//GEN-LAST:event_findClassFieldKeyPressed
    /**
     * when the user presses enter, clicks the button
     *
     * @param evt
     */
    private void conflictField2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_conflictField2KeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) { //checks if the user presses enter in the text field
            conflictButton.doClick();//clicks the button
        }
    }//GEN-LAST:event_conflictField2KeyPressed
    /**
     * when the user presses enter, clicks the button
     *
     * @param evt
     */
    private void conflictField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_conflictField1KeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) { //checks if the user presses enter in the text field
            conflictButton.doClick();//clicks the button
        }
    }//GEN-LAST:event_conflictField1KeyPressed

    /**
     * clears the user's schedule
     *
     * @param evt
     */
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        user.clearClass();
        infoLabel.setText("Information: Schedule cleared!");
        clearModel();
        updateSchedule();
    }//GEN-LAST:event_clearButtonActionPerformed

    /**
     * displays the scheduling table
     *
     * @param evt
     */
    private void tableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableButtonActionPerformed
        jFrame1.setVisible(true);
        jFrame1.setExtendedState(MAXIMIZED_BOTH);
        int currentHour = 6;
        String am = "A";
        String extraZero;
        int row = 0;
        for (int hours = 0; hours < 16; hours++) {
            for (int minutes = 0; minutes < 60; minutes += 5) {
                if (minutes < 10) {
                    extraZero = "0";
                } else {
                    extraZero = "";
                }
                classTable.setValueAt("" + currentHour + ":" + extraZero + minutes + am + "M", row, 0);
                row++;
            }
            if (currentHour == 11) {
                am = "P";
            }
            if (currentHour == 12) {
                currentHour = 0;
            }
            currentHour++;
        }
        for (int i = 0; i < user.userClasses.size(); i++) {
            for (int day = 0; day < 5; day++) {
                if (user.userClasses.get(i)._days[day] == true) {
                    for (int j = user.userClasses.get(i).getConvertedStart(); j < user.userClasses.get(i).getConvertedEnd(); j += 5) {
                        classTable.setValueAt(user.userClasses.get(i).getID(), (int) (j * .2 - 72), day + 1);
                    }
                }
            }
        }
        boolean start = false;
        row = 0;

        while (!start) {
            if (classTable.getValueAt(row + 3, 1) == (null) && classTable.getValueAt(row + 3, 2) == (null) && classTable.getValueAt(row + 3, 3) == (null) && classTable.getValueAt(row + 3, 4) == (null) && classTable.getValueAt(row + 3, 5) == (null)) {
                ((DefaultTableModel) classTable.getModel()).removeRow(row);
            } else {
                start = true;
            }
        }

    }//GEN-LAST:event_tableButtonActionPerformed

    /**
     * removes a class from the user's schedule
     *
     * @param evt
     */
    private void removeClassButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeClassButtonActionPerformed
        for (int i = 0; i < user.userClasses.size(); i++) {
            if (removeClassComboBox.getSelectedItem().equals(user.userClasses.get(i))) {
                user.userClasses.remove(i);
            }
        }
        updateSchedule();
        try {
            BufferedWriter wrtr = new BufferedWriter(new FileWriter(user._name + ".txt"));
            for (int i = 0; i < user.userClasses.size(); i++) {
                String line = user.userClasses.get(i).outputInfoNoNewLine(i);
                wrtr.write(line);
                wrtr.newLine();
            }
            wrtr.close();

        } catch (Exception ex) {
        }
    }//GEN-LAST:event_removeClassButtonActionPerformed

    /**
     * only numbers are allowed
     *
     * @param evt
     */
    private void classFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_classFieldKeyTyped
        char character = evt.getKeyChar();//gets the character entered into the textfield
        if (character < '0' || character > '9') {//if the character is not a number
            evt.consume();//doesn't allow the character to be added to the text field
        }
    }//GEN-LAST:event_classFieldKeyTyped

    /**
     * only numbers are allowed
     *
     * @param evt
     */
    private void conflictField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_conflictField1KeyTyped
        char character = evt.getKeyChar();//gets the character entered into the textfield
        if (character < '0' || character > '9') {//if the character is not a number
            evt.consume();//doesn't allow the character to be added to the text field
        }
    }//GEN-LAST:event_conflictField1KeyTyped

    /**
     * only numbers are allowed
     *
     * @param evt
     */
    private void conflictField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_conflictField2KeyTyped
        char character = evt.getKeyChar();//gets the character entered into the textfield
        if (character < '0' || character > '9') {//if the character is not a number
            evt.consume();//doesn't allow the character to be added to the text field
        }
    }//GEN-LAST:event_conflictField2KeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {


        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addClassButton;
    private javax.swing.JComboBox addClassComboBox;
    private javax.swing.JTextField classField;
    private javax.swing.JTable classTable;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton conflictButton;
    private javax.swing.JTextField conflictField1;
    private javax.swing.JTextField conflictField2;
    private javax.swing.JLabel creditsLabel;
    private javax.swing.JButton creditsSort;
    private javax.swing.JButton facultySort;
    private javax.swing.JButton findClassButton;
    private javax.swing.JTextField findClassField;
    private javax.swing.JButton idSort;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    public javax.swing.JLabel nameLabel;
    private javax.swing.JButton nameSort;
    private javax.swing.JLabel numberOfClassesLabel;
    private javax.swing.JButton removeClassButton;
    private javax.swing.JComboBox removeClassComboBox;
    private javax.swing.JButton tableButton;
    private javax.swing.JTextArea textArea;
    public javax.swing.JTextArea textArea2;
    private javax.swing.JButton timeSort;
    private javax.swing.JButton viewClassButton;
    // End of variables declaration//GEN-END:variables
}
